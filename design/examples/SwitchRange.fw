public class SwitchRangeExample
{
    public string IntToString(int num)
    {
        // TODO how to handle inclusive/exclusive?
        // Default to range behavior?
        switch (num)
        {
            case 0:
                return "None";
            case 1:
                return "One";
            case 2:
                return "A couple";
            range [3..5]:
                return "A few";
            range [6..100): // doesn't include 100. Same as [6..99]
                return "A lot";
            default:
                return "Too many to count";
        }
    }
    
    public string String(string str)
    {
        switch (num)
        {
            case null:
                return "Null";
            case "":
                return "Empty";
            expression value.StartsWith("A"):
                return "Starts with A";
            regex /^[0-9]/:
                return "Starts with a number";
            regex /.$/:
                return "Must be a sentence, it ends with a period";
            default:
                return "Who knows what's going on here";
        }   
    }

    public string EnumToString(ExampleEnum e)
    {
        // Since enums cannot hold values outside their decalred values,
        // the cases are simple
        switch (e)
        {
            case ExampleEnum.None:
                return "None";
            case ExampleEnum.One:
                return "Only one";
            cases { ExampleEnum.SoMany, ExampleEnum.AllOfThem }:
                return "The rest";
        }
    }
}

public enum ExampleEnum
{
    None,
    One,
    SoMany,
    AllOfThem
}
