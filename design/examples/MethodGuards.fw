public class MethodGuards
{
    // All of these are the same
    // public string Test1(string a, number b) has b guarded by PositiveNumberGuard
    // public string Test1(string a, number b) is guarded by PositiveNumberGuard(b)
    {
        // Always false because of the guard
        if (b < 0)
            ;
            
        // Guards can be conditional and will pass on when outer scope validates a condition
        if (b mod 2)
        {
            // This is redundant because any conditional expression will automatically add its own conditional guard
            return guard: b is even;
        }
        
        return "Done";
            
        return guard: value is not null; // redundent since return type is `string` and not `string?`
        return guard: value is hydrated; // same as above
        return guard: value.HasValue; // same as above
        return guard: value != null; // same as above
        
        return guard: value.IsNullOrWhiteSpace();
        return guard: value > IsNullOrWhiteSpace();
    }
    
    // Guard statements have no return type except guard
    public static guard PositiveNumberGuard(number b)
    {
        return guard: b > 0;
    }
}
